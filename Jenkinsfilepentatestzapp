pipeline {
    agent any
    options {
        skipDefaultCheckout(true)
    }
    stages {
        stage('Code checkout from GitHub') {
            steps {
                script {
                    cleanWs()
                    git credentialsId: 'github-pat', url: 'https://github.com/mt524/abcd-student', branch: 'main'
                }
            }
        }
        stage('Prepare') {
            steps {
                sh 'mkdir -p results/'
            }
        }
 // Dodaj etap aktualizacji passive.yaml
        //stage('Update passive.yaml') {
        //    steps {
        //        script {
        //            sh '''
        //                -v /home/Projects/abcd-student/.zap:/zap/wrk/:rw \
        //                pwd
        //                echo $container
        //                ls -al /zap/
        //                git pull origin main
        //                echo "Pobieranie passive.yaml..."
        //                curl -o /zap/wrk/passive.yaml https://raw.githubusercontent.com/mt524/abcd-student/main/.zap/passive.yaml
        //            '''
        //        }
        //    }
       // }
       stage('DAST') {
        steps {
            // Usuń istniejący kontener zap, jeśli istnieje
            sh 'docker rm -f zap || true'
    
            // Uruchom kontener juice-shop
            sh '''
                docker run --name juice-shop -d --rm \
                -p 3000:3000 bkimminich/juice-shop
                sleep 10
            '''
       
        // Uruchom kontener zap i wykonaj skanowanie
        sh '''
    docker run --name zap \
        -v /home/Projects/abcd-student/.zap:/zap/wrk/:rw \
        -t ghcr.io/zaproxy/zaproxy:stable \
        bash -c "zap.sh -cmd -addonupdate; zap.sh -cmd -addoninstall communityScripts -addoninstall pscanrulesAlpha -addoninstall pscanrulesBeta -autorun /var/jenkins_home/workspace/Penta_test_zapp/.zap/passive.yaml; sleep 400"
'''

    }
    post {
        always {
            // Sprawdź, czy raport HTML istnieje przed próbą skopiowania
            script {
                def htmlReportExists = sh(script: 'docker exec zap ls /zap/wrk/reports/zap_html_report.html', returnStatus: true) == 0
                def xmlReportExists = sh(script: 'docker exec zap ls /zap/wrk/reports/zap_xml_report.xml', returnStatus: true) == 0

                if (htmlReportExists) {
                    sh 'docker cp zap:/zap/wrk/reports/zap_html_report.html ${WORKSPACE}/results/zap_html_report.html'
                } else {
                    echo 'HTML report does not exist.'
                }

                if (xmlReportExists) {
                    sh 'docker cp zap:/zap/wrk/reports/zap_xml_report.xml ${WORKSPACE}/results/zap_xml_report.xml'
                } else {
                    echo 'XML report does not exist.'
                }
            }

            // Zatrzymaj i usuń kontenery
            sh 'docker stop zap juice-shop || true'
            sh 'docker rm zap juice-shop || true'
        }
    }
} // Close the DAST stage

    } // Close the stages block

    post { // This post block is correctly positioned here
        always {
            echo 'Archiving results...'
            archiveArtifacts artifacts: 'results/**/*', fingerprint: true, allowEmptyArchive: true
            echo 'Sending reports to DefectDojo...'
            defectDojoPublisher(artifact: 'results/zap_xml_report.xml', productName: 'Juice Shop', scanType: 'ZAP Scan', engagementName: 'michal.tomczak@opi.org.pl')
        }
    }
}
